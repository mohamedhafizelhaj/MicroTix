<?php
# Generated by the protocol buffer compiler (roadrunner-server/grpc). DO NOT EDIT!
# source: app/Proto/event.proto

namespace GRPC\Services\Event;

use Spiral\RoadRunner\GRPC;

interface EventInterface extends GRPC\ServiceInterface
{
    // GRPC specific service name.
    public const NAME = "microtix.Event";

    /**
    * @param GRPC\ContextInterface $ctx
    * @param EventData $in
    * @return EventInstance
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function createEvent(GRPC\ContextInterface $ctx, EventData $in): EventInstance;

    /**
    * @param GRPC\ContextInterface $ctx
    * @param EventInstance $in
    * @return EventInstance
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function updateEvent(GRPC\ContextInterface $ctx, EventInstance $in): EventInstance;

    /**
    * @param GRPC\ContextInterface $ctx
    * @param EventId $in
    * @return Status
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function deleteEvent(GRPC\ContextInterface $ctx, EventId $in): Status;

    /**
    * @param GRPC\ContextInterface $ctx
    * @param GetEventsRequest $in
    * @return PaginatedEventsResponse
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function getEvents(GRPC\ContextInterface $ctx, GetEventsRequest $in): PaginatedEventsResponse;

    /**
    * @param GRPC\ContextInterface $ctx
    * @param MyEventsRequest $in
    * @return PaginatedEventsResponse
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function myEvents(GRPC\ContextInterface $ctx, MyEventsRequest $in): PaginatedEventsResponse;

    /**
    * @param GRPC\ContextInterface $ctx
    * @param EventId $in
    * @return EventInstance
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function getEvent(GRPC\ContextInterface $ctx, EventId $in): EventInstance;

    /**
    * @param GRPC\ContextInterface $ctx
    * @param AuthData $in
    * @return Status
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function canPerformAction(GRPC\ContextInterface $ctx, AuthData $in): Status;
}
